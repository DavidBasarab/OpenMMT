# Syntax:
#   gitver.py file project_path
#
# Example:
#   gitver.py src\version.h x:\dev\github\openmmt

VERSION_FILE = """// {VER_STRING}
// This file is automatically generated, edit it at your own risk.

#pragma once

#define VERSION_FILE              {VER_COMMAS}
#define VERSION_PRODUCT           VERSION_FILE
#define VERSION_FILE_STR         "{VER_STRING}"
#define VERSION_PRODUCT_STR       VERSION_FILE_STR

// EOF

"""

import subprocess
import sys
import os

class gitver:
  def __init__(self, version_file='version.h', project_path=None):
    self.version_file = version_file
    self.project_path = project_path
    self.describe    = None
    self.get_describe()
    os.chdir(self.project_path)
    
  def get_describe(self):
    # Check to see if this is the first time we're being called.
    if self.describe == None:
      p = subprocess.Popen([ 'git', 'describe'], cwd=self.project_path, stdout=subprocess.PIPE)
      p.wait()
      self.describe = p.stdout.readline().rstrip()
      
      # Fill in the blanks.      
      ver = self.describe.split('.')
      tmp = ver[2].split('-')
      self.commit = tmp[1]
      self.hash   = tmp[2]
      ver[2] = tmp[0]
      ver.append(self.commit)
      self.version_string = ','.join(ver)
      
    return self.describe

  # Prints
  def print_version_info(self):
    variables = { 'VER_COMMAS': self.version_string, 'VER_STRING': self.describe }
    return VERSION_FILE.format(**variables)
  
  # Check to see if we need to update the version file...
  def needs_update(self):
    try:
      with open(self.version_file) as fd:      
        if fd.readline()[3:].rstrip() != self.describe:
          return True
    
    # If we fail for whatever reason, let's just update it anyways. Why not?
    except:
      return True
  
  # Updates the version file.
  def update(self):
    print 'Checking %s...' % self.version_file
    if self.needs_update() == True:
      print ' Updating...'
      
      fd = open(self.version_file, 'w')
      fd.write(self.print_version_info())
      fd.close()
      
      print ' Done.'
      
    else:
      print ' No update needed.'
    
if __name__ == "__main__":
  if len(sys.argv) < 3:
    print 'Invalid Syntax. Usage:\n gitver.py version_file project_path\n'
    print 'Sample:\n gitver.py version.h x:\dev\github\openmmt\n\n'
  else:
    g = gitver(sys.argv[1], ' '.join(sys.argv[2:]))
    g.update()
    
 # EOF
 
 